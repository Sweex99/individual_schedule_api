require 'prawn'
require 'prawn/table'

class PdfGeneratorService
  attr_reader :student, :request

  def initialize(request)
    @student = request.student
    @request = request
  end

  def perform
    generate_individual_schedule_statement(Prawn::Document.new(page_size: 'A4')).render
  end

  def generate_individual_schedule_statement(pdf)
    font_path        = Rails.root.join('app', 'assets', 'fonts', 'DejaVuSans.ttf')
    bold_font_path   = Rails.root.join('app', 'assets', 'fonts', 'DejaVuSans-Bold.ttf')
    italic_font_path = Rails.root.join('app', 'assets', 'fonts', 'DejaVuSans-BoldOblique.ttf')

    pdf.font_families.update('DejaVu' => {
      normal: font_path,
      bold: bold_font_path,
      italic: italic_font_path
    })

    pdf.font 'DejaVu'
    pdf.font_size 14
    # üßæ –®–∞–ø–∫–∞
    pdf.text request.student.group.statement_head_text, align: :right
    pdf.text "#{student_gender} #{student.semester / 2}-–≥–æ –∫—É—Ä—Å—É", align: :right
    pdf.text "—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ: #{student.group.description}", align: :right
    pdf.text "#{student.full_name}\n", align: :right

    # --- –°—Ç–æ—Ä—ñ–Ω–∫–∞ 1 ---
    # –í–∏–∑–Ω–∞—á–∏–º–æ –≤–∏—Å–æ—Ç—É –¥–ª—è —Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
    available_height = pdf.cursor
    content_height = 200 # —É–º–æ–≤–Ω–∞ –≤–∏—Å–æ—Ç–∞ –±–ª–æ–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    top_padding = (available_height - content_height) / 4

    pdf.move_down top_padding

    pdf.move_down 20

    # üìÑ –ù–∞–∑–≤–∞
    pdf.text "–ó–∞—è–≤–∞", align: :center, style: :bold

    pdf.move_down 20

    # üìù –¢–µ–∫—Å—Ç –∑–∞—è–≤–∏
    pdf.text "–ü—Ä–æ—à—É –Ω–∞–¥–∞—Ç–∏ –º–µ–Ω—ñ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è —É #{ short_semester } —Å–µ–º–µ—Å—Ç—Ä—ñ #{ student.semester }-–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∫—É —É –∑–≤'—è–∑–∫—É –∑ #{ request.reason.description }.", align: :center

    # üìÖ –î–∞—Ç–∞ —Ç–∞ –ø—ñ–¥–ø–∏—Å –≤–Ω–∏–∑—É
    pdf.move_down 100

    date_text = "#{request.created_at.strftime('%d.%m.%Y')}"
    signature_text = "–ü—ñ–¥–ø–∏—Å–∞–Ω–æ!"

    date_width = pdf.width_of(date_text)
    signature_width = pdf.width_of(signature_text)

    pdf.draw_text date_text, at: [0, pdf.cursor]
    pdf.font 'DejaVu', style: :italic
    pdf.draw_text signature_text, at: [pdf.bounds.width - signature_width, pdf.cursor]
    pdf.font 'DejaVu', style: :normal

    # --- –°—Ç–æ—Ä—ñ–Ω–∫–∞ 2: –¢–∞–±–ª–∏—Ü—è ---
    pdf.start_new_page

    pdf.text "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è", align: :center, style: :bold
    pdf.move_down 20

    # –¢–∞–±–ª–∏—á–Ω—ñ –¥–∞–Ω—ñ
    data = [["–ü—Ä–µ–¥–º–µ—Ç", "–ö-—Ç—å –≥–æ–¥.", "–í–∏–∫–ª–∞–¥–∞—á", "–ö–æ–º–µ–Ω—Ç–∞—Ä", "–°—Ç–∞—Ç—É—Å"]]
    request.subjects_teachers.each do |st|
      data << [
        st.subject.name,
        st.subject.hours_count,
        st.teacher.full_name,
        st.comment.presence || "-",
        humanize_state(st.state)
      ]
    end

    column_widths = [100, 40, 80, 230, 70] # –°—É–º–∞ = 520 (–¥–æ–ø—É—Å—Ç–∏–º–æ)

    pdf.table(data, header: true, column_widths: column_widths) do
      row(0).font_style = :bold
      row(0).background_color = 'dddddd'
      self.row_colors = ['ffffff', 'f5f5f5']
      self.cell_style = {
        size: 10,
        padding: [8, 6],
        borders: [:top, :bottom],
        border_color: 'aaaaaa'
      }
    end

    pdf
  end

  private

  def student_gender
    student.male? ? '—Å—Ç—É–¥–µ–Ω—Ç–∞' : '—Å—Ç—É–¥–µ–Ω—Ç–∫–∏'
  end

  def short_semester
    student.semester % 2 == 0 ? '–¥—Ä—É–≥–æ–º—É' : '–ø–µ—Ä—à–æ–º—É'
  end

  def humanize_state(state)
    if state == "approved"
      "–ü—ñ–¥–ø–∏—Å–∞–Ω–æ"
    elsif state == "pending"
      "–û—á—ñ–∫—É—î—Ç—å—Å—è"
    else
      "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ"
    end
  end
end
